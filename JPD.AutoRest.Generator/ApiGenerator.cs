using Microsoft.CodeAnalysis;
using Microsoft.CodeAnalysis.CSharp.Syntax;
using System.Linq;
using System.Collections.Immutable;

[Generator]
public class ApiGenerator : IIncrementalGenerator
{
    public void Initialize(IncrementalGeneratorInitializationContext context)
    {
        // Register the attribute
        context.RegisterPostInitializationOutput(ctx =>
            ctx.AddSource("AutoApiAttribute.g.cs",
                @"namespace JPD.AutoRest.Attributes
                {
                    [System.AttributeUsage(System.AttributeTargets.Class)]
                    public class AutoApiAttribute : System.Attribute
                    {
                        public string RoutePrefix { get; set; } = ""api"";
                        public Type? DbContextType { get; set; }
                    }
                }"));

        // Find decorated classes
        var classProvider = context.SyntaxProvider
            .CreateSyntaxProvider(
                predicate: static (node, _) => node is ClassDeclarationSyntax cds &&
                    cds.AttributeLists.Count > 0,
                transform: static (ctx, _) => (ClassDeclarationSyntax)ctx.Node)
            .Where(static cds => cds.AttributeLists.Any(al =>
                al.Attributes.Any(a => a.Name.ToString() is "AutoApi" or "AutoApiAttribute")));

        // Get additional files
        var additionalFilesProvider = context.AdditionalTextsProvider
            .Select((text, _) => text.Path);

        // Combine with compilation
        var compilationProvider = context.CompilationProvider;
        var combined = classProvider
            .Combine(compilationProvider)
            .Combine(additionalFilesProvider.Collect());

        // Generate output
        context.RegisterSourceOutput(combined, (ctx, source) =>
        {
            var ((classDecl, compilation), additionalFiles) = source;
            var model = compilation.GetSemanticModel(classDecl.SyntaxTree);
            var classSymbol = model.GetDeclaredSymbol(classDecl) as INamedTypeSymbol;

            if (classSymbol == null) return;

            var (routePrefix, dbContextType) = GetAttributeValues(classSymbol);
            var className = classSymbol.Name;
            var classNamespace = classSymbol.ContainingNamespace.ToDisplayString();
            var hasDbContext = dbContextType != null;
            var dbContextTypeName = dbContextType?.ToDisplayString();

            // Generate auto content with full namespace
            var autoGeneratedContent = GenerateAutoContent(
                className: className,
                routePrefix: routePrefix,
                modelNamespace: classNamespace,
                hasDbContext: hasDbContext,
                dbContextType: dbContextTypeName);

            ctx.AddSource($"{className}Endpoints.gen.cs", autoGeneratedContent);

            // Generate user file if doesn't exist
            var userFileName = $"{className}Endpoints.cs";
            var userFileExists = additionalFiles.Any(path => path.EndsWith(userFileName));

            if (!userFileExists)
            {
                var userContent = $$"""
                    // <auto-generated/>
                    using Microsoft.AspNetCore.Builder;
                    using JPD.AutoRest.Generated;

                    namespace {{classNamespace}}
                    {
                        public static partial class {{className}}Endpoints
                        {
                            public static WebApplication Map{{className}}Endpoints(this WebApplication app)
                            {
                                // Add custom endpoints here
                                return app.MapBase{{className}}Endpoints();
                            }
                        }
                    }
                    """;
                ctx.AddSource(userFileName, userContent);
            }
        });
    }

    private (string routePrefix, INamedTypeSymbol? dbContextType) GetAttributeValues(INamedTypeSymbol classSymbol)
    {
        var attribute = classSymbol.GetAttributes()
            .First(a => a.AttributeClass?.Name is "AutoApi" or "AutoApiAttribute");

        var routePrefix = attribute.NamedArguments
            .FirstOrDefault(arg => arg.Key == "RoutePrefix").Value.Value?.ToString()
            ?? $"api/{classSymbol.Name.ToLower()}";

        var dbContextType = attribute.NamedArguments
            .FirstOrDefault(arg => arg.Key == "DbContextType").Value.Value as INamedTypeSymbol;

        return (routePrefix, dbContextType);
    }

    private string GenerateAutoContent(string className, string routePrefix,
        string modelNamespace, bool hasDbContext, string? dbContextType)
    {
        var fullModelName = $"{modelNamespace}.{className}";
        var crudOperations = hasDbContext
            ? GenerateEfCrudOperations(fullModelName, dbContextType!, routePrefix)
            : GenerateBasicCrudOperations(fullModelName);

        return $$"""
            // <auto-generated/>
            using Microsoft.AspNetCore.Mvc;
            using Microsoft.AspNetCore.Http;
            {{(hasDbContext ? "using Microsoft.EntityFrameworkCore;\nusing " + dbContextType + ";" : "")}}

            namespace JPD.AutoRest.Generated
            {
                public static partial class {{className}}Endpoints
                {
                    public static WebApplication MapBase{{className}}Endpoints(this WebApplication app)
                    {
                        var group = app.MapGroup("{{routePrefix}}");
                        
                        {{crudOperations}}
                        
                        return app;
                    }
                }
            }
            """;
    }

    private string GenerateEfCrudOperations(string fullModelName, string dbContextType, string routePrefix)
    {
        return $$"""
            // GET all
            group.MapGet("/", async ([FromServices] {{dbContextType}} dbContext) => 
                await dbContext.Set<{{fullModelName}}>().ToListAsync());
            
            // GET by id
            group.MapGet("/{id}", async (int id, [FromServices] {{dbContextType}} dbContext) => 
                await dbContext.Set<{{fullModelName}}>().FindAsync(id) is {{fullModelName}} entity 
                    ? Results.Ok(entity) 
                    : Results.NotFound());
            
            // POST
            group.MapPost("/", async ([FromBody] {{fullModelName}} item, [FromServices] {{dbContextType}} dbContext) => 
            {
                dbContext.Set<{{fullModelName}}>().Add(item);
                await dbContext.SaveChangesAsync();
                return Results.Created($"/{{routePrefix}}/{item.Id}", item);
            });
            
            // PUT
            group.MapPut("/{id}", async (int id, [FromBody] {{fullModelName}} item, [FromServices] {{dbContextType}} dbContext) => 
            {
                var existing = await dbContext.Set<{{fullModelName}}>().FindAsync(id);
                if (existing == null) return Results.NotFound();
                
                dbContext.Entry(existing).CurrentValues.SetValues(item);
                await dbContext.SaveChangesAsync();
                return Results.NoContent();
            });
            
            // DELETE
            group.MapDelete("/{id}", async (int id, [FromServices] {{dbContextType}} dbContext) => 
            {
                var entity = await dbContext.Set<{{fullModelName}}>().FindAsync(id);
                if (entity == null) return Results.NotFound();
                
                dbContext.Set<{{fullModelName}}>().Remove(entity);
                await dbContext.SaveChangesAsync();
                return Results.NoContent();
            });
            """;
    }

    private string GenerateBasicCrudOperations(string fullModelName)
    {
        return $$"""
            // GET all
            group.MapGet("/", () => "GET all {{fullModelName}} (auto-generated)");
            
            // GET by id
            group.MapGet("/{id}", (int id) => $"GET {{fullModelName}} {id} (auto-generated)");
            
            // POST
            group.MapPost("/", ([FromBody] {{fullModelName}} item) => $"CREATE {{fullModelName}} (auto-generated)");
            
            // PUT
            group.MapPut("/{id}", (int id, [FromBody] {{fullModelName}} item) => 
                $"UPDATE {{fullModelName}} {id} (auto-generated)");
            
            // DELETE
            group.MapDelete("/{id}", (int id) => $"DELETE {{fullModelName}} {id} (auto-generated)");
            """;
    }
}